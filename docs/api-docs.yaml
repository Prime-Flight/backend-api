openapi: 3.0.0

info:
  title: Prime Flight API Documentation
  version: '1.0'

servers:
  - url : 'http://localhost:3213/api'
    description: Local Development Server
  - url : 'https://primeflight-api-staging.km3ggwp.com/api'
    description: Remote Staging Server
  - url : 'https://primeflight-api.km3ggwp.com/api'
    description: Remote Production Server

components:
  responses:
    UnauthorizedError:
      description: Invalid Access Token
      content:
        application/json:
          examples:
            Unauthorized:
              value:
                status: false
                message: You are not authorized  
                data: null
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      title: User
      type: object
      description: 'User can have three role as an Admin, Buyer and Anonymous User ( not registered )'
      properties:
        id:
          type: integer 
          description: Unique Identifier for User
        name:
          type: string
        email:
          type: string
          description: the email should be unique, one email one user  
        password:
          type: string
          description: the password should be encrypted  
        url_profile_picture:
          type: string
          description: the url of picture profile using imagekit, the default picture is null then it should be providing an anonymous image if it's null 
        gender:
          type: enum
          description: radio button male or female
        is_google:
          type: boolean
          description: To check if the user is using the google authentication if user have registered with google then we give the warning to user to login with google instead of regular email    
        role:
          type: integer
          description: A foreign key for the role of user like 'admin' and 'buyer'
        nationality:
          type: string
          description: Nationality to determine the booking input for passport or country identifier (KTP)  
        is_verified:
          type: boolean
          description: To check if the user is verified
      required:
        - id
        - name
        - email
        - password
        - is_google
        - role
        - nationality
        - is_verified
    Role:
      title: Role
      type: object
      description: 'Role Based Auth This is for middleware Admin and User and Guest'
      properties:
        id:
          type: integer 
          description: Unique Identifier for Role
        name:
          type: string
          description: Name of the Role for example = Admin 
      required:
        - id
        - name
    Module:
      title: Module
      type: object
      description: 'Module is for checking what module we are in'
      properties:
        id:
          type: integer 
          description: Unique Identifier for Module
        name:
          type: string
          description: Name of the Module for example = User Dashboard 
      required:
        - id
        - name
    Access:
      title: Access
      type: object
      description: 'Access is for granting the user permission for using the Module'
      properties:
        id:
          type: integer 
          description: Unique Identifier for Access
        role_id:
          type: integer 
          description: Foreign key of Role Id
        module_id:
          type: integer 
          description: Foreign key of Role Id
        read:
          type: boolean
          description: Read Permission of a module and data 
        write:
          type: boolean
          description: Write Permission of a module and data 
      required:
        - id
        - role_id
        - module_id
        - read
        - write
    Transaction:
      title: Transaction
      type: object
      description: 'Transaction that the User Do with the Application from the Booking'
      properties:
        id:
          type: integer 
          description: Unique Identifier for Access
        booking_id:
          type: integer 
          description: Foreign key of Booking
        total_price:
          type: integer 
          description: Foreign key of Role Id
        status:
          type: enum
          description: Status consist of ("Rejected", "Pending", "Success") 
      required:
        - id
        - booking_id
        - total_price
        - status
    Flight:
      title: Flight
      type: object
      description: 'The Flight'
      properties:
        id:
          type: integer 
          description: Unique Identifier for Access
        airport:
          type: string 
          description: Location for the Airport
        flight_date:
          type: date 
          description: Date of the Airport
      required:
        - id
        - airport
        - flight_date
    Booking:
      title: Booking
      type: object
      description: 'The Booking User did in the flight'
      properties:
        id:
          type: integer 
          description: Unique Identifier for Access
        destination:
          type: integer 
          description: Foreign key of Flight Model
        user:
          type: integer 
          description: Foreign key of User Id
        seat:
          type: integer 
          description: Number Of Seat that user Book for example = 3 seat
        kode_booking:
          type: string
          description: Book Code 
      required:
        - id
        - destination
        - user
        - seat
        - kode_booking
    BookingDetail:
      title: BookingDetail
      type: object
      description: 'The Booking Detail for the document and flight code'
      properties:
        id:
          type: integer 
          description: Unique Identifier for Access
        booking_id:
          type: integer 
          description: Foreign key of Booking Model
        document_url:
          type: string 
          description: url for the booking detail for user after payment the transaction that the ticket will be generated to redeem a boarding pass 
        kode_penerbangan:
          type: string 
          description: the flight code 
      required:
        - id
        - booking_id
        - document_url
        - kode_penerbangan
    Buyer:
      title: Buyer
      type: object
      description: 'The Buyer is not the User that login, it consist the information for the User that responsible for the booking of the flight'
      properties:
        id:
          type: integer 
          description: Unique Identifier for Access
        booking_detail_id:
          type: integer 
          description: Foreign key of Booking Detail
        user:
          type: integer 
          description: Foreign key of User Id
        seat:
          type: integer 
          description: Number Of Seat that user Book for example = 3 seat
        kode_booking:
          type: string
          description: Book Code 
      required:
        - id
        - destination
        - user
        - seat
        - kode_booking
    Passenger:
      title: Passenger
      type: object
      description: 'Passenger is the information of the consumer that will redeem the ticket'
      properties:
        id:
          type: integer 
          description: Unique Identifier for Access
        buyer_id:
          type: integer 
          description: Foreign key of buyer
        name:
          type: string 
          description: Foreign key of User Id
        passenger_category:
          type: enum 
          description: Passenger Category uses ('child', 'adult') 
        nik:
          type: string
          description: the ID of the passenger for adult 
        passport_number:
          type: string
          description: the passport_number of the passenger for adult 
        passenger_detail:
          type: integer
          description: foreign key of passpor detail 
      required:
        - id
        - buyer_id
        - name
        - passenger_category
        - passenger_detail
    PassengerDetail:
      title: PassengerDetail
      type: object
      description: 'PassengerDetail is the detail information such as passenger sensitive id on NIK or Passport'
      properties:
        id:
          type: integer 
          description: Unique Identifier for Access
        nik:
          type: string
          description: the ID number of the passenger for adult 
        passport_number:
          type: string
          description: the passport number of the passenger for adult and foreign
        gender:
          type: enum
          description: enum value "Male" and "Female"
      required:
        - id
        - nik
        - passport_number
        - gender

security:
  - bearerAuth: []

tags:
  - name: Auth
    description: Api for Auth 

paths:
  '/auth/register':
    post:
      summary: Create New User
      operationId: post-user-register
      tags: 
        - Auth
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Nanda Suparman:
                  value:
                    status: true
                    message: Successfully Registered With Email
                    data:
                      id: 1
                      name: Nanda Suparman
                      email: nandasuparman@gmail.com
                      url_profile_picture: null
                      gender: male
                      isGoogle: false
                      role: 2
                      nationality: Indonesian
                      is_verified: false
        '400':
          description: Missing Detail Information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Failed Registered User :
                  value:
                    status: false
                    message: Failed Register With Email, ${{err}}
                    data: null
        '409':
          description: Email Already Used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Email Already Used :
                  value:
                    status: false
                    message: Failed Register With Your Email Because Email Already Used, Please Use Another Email.
                    data: null
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                email: 
                  type: string
                password: 
                  type: string
                gender:
                  type: string
                nationality: 
                  type: string
              required:
                - name
                - email
                - password
                - gender
                - nationality
            examples:
              Create Nanda Suparman:
                value:
                  name: Nanda Suparman
                  email: nandasuparman@gmail.com
                  password: super-secret-password
                  gender: Male
                  nationality: Indonesian
      decription: Post the name email password and nationality, the password should be encrypted
    description: Create new User
  /auth/login:
    post:
      summary: Login
      operationId: post-user-login
      tags: 
        - Auth
      responses:
        '200':
          description: User Successfully Login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Successfully Login Nanda Suparman:
                  value:
                    status: true
                    message: Successfully Login
                    data:
                      email: nandasuparman@gmail.com
                      token: <JWTtoken> 
        '400':
          description: Email Password Doesn't Match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Missing Detail Info:
                  value:
                    status: false
                    message: email or password doesn\'t match!
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                password: 
                  type: string
              required:
                - email
                - password
            examples:
              Login Nanda Suparman:
                  email: "nandasuparman@gmail.com"
                  password: "super-secret-password"
      decription: Post the login and should be encrypted and also should be returned jwt token.
    description: Login User

  /auth/login/google:
    get:
      summary: Login with Google
      operationId: get-auth-login-google
      tags: 
        - Auth
      responses:
        '200':
          description: User Successfully Login With Google
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Successfully Login With Google:
                  value:
                    status: true
                    message: Successfully Login with Google
                    data:
                      user_id: 1
                      email: nandasuparmin@gmail.com
                      token: <JWTToken>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Message already registered with email:
                  value:
                    status: false
                    message: You have registered with your email, Please login with your email instead
                    data: null
      decription: Get the Google Login using the Authenticate.
    description: Login User With Google

  /auth/whoami:
    get:
      summary: Who am I is a function to check the current user it consists a Bearer Token auth for finding the current logged in user 
      operationId: get-auth-whoami
      tags:
        - Auth
      responses:
        '200':
          description: Successfully Get Current User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Successfully Get Current User:
                  value:
                    status: true
                    message: Successfully Get Current User
                    data:
                      name: Nanda Suparman
                      email: nandasuparman@gmail.com
                      url_profile_picture: null
                      gender: male
                      is_google: false
                      role: 2
                      nationality: Indonesian

  /auth/forgot-password:
    get:
      summary: Forgot Password Email Template
      operationId: get-auth-forgot-password
      tags: 
        - Auth
      responses:
        '200':
          description: User Successfully Send Email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Successfully Render Email Forgot Password for Nanda:
                  value:
                    status: true
                    message: Successfully Send Email Forgot Password
                    data:
                      email: nandasuparman@gmail.com

    post:
      summary: Forgot Password
      operationId: post-auth-forgot-password
      tags:
        - Auth
      responses:
        '200':
          description: User Successfully Send Email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Successfully Send Email Forgot Password for Nanda:
                  value:
                    status: true
                    message: Successfully Send Email Forgot Password
                    data:
                      email: nandasuparman@gmail.com
        '400':
          description: Bad Request No Email Registered, Verify User Email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Message Cannot Verify:
                  value:
                    status: false
                    message: Cannot Verify User because User email is unavailable  
                    data: null

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                  description: Send the User Email to send the forgot password confirmation
              required:
                - email
            examples:
              Send Email to Nanda Suparman:
                value:
                  email: nandasuparman@gmail.com
      decription: Post the email to send the forgot password 
    description: Find and send to send forgot password account

  /auth/reset-password:
    post:
      summary: Reset Password by finding email using the middleware (whoami) and getting the token from url and match the token with the current function
      security:
        - bearerAuth: []
      operationId: post-auth-reset-password
      tags:
        - Auth
      responses:
        '200':
          description: Successfully Reset Password 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Successfully Reset Password for Nanda:
                  value:
                    status: true
                    message: Successfully Reset Password
                    data:
                      email: nandasuparman@gmail.com
                      newPassword: true
        '400':
          description: Bad Request No Email Registered, Reset User Password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Message Cannot Verify:
                  value:
                    status: false
                    message: Cannot Reset User Password because User Email is Unavailable  
                    data: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '402':
          description: Password does not match
          content:
            application/json:
              examples:
                Doesn't match password:
                  value:
                    status: false
                    message: Your New Password and the Confirm New Password Does not match!  
                    data: null
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password: 
                  type: string
                  description: New Password the user will use
                confirm_new_password: 
                  type: string
                  description: Confirm the New Password the user will use
              required:
                - password:
                - confirm_new_password:
            examples:
              Nanda Suparman Reset Password:
                value:
                  password: newer-password
                  confirm_new_password: newer-password
      decription: Post reset password by confirming 
    description: Find and reset password account according to the user request

  /auth/verify-user:
    post:
      summary: Verify User Using Email by Searching The Current User Logged In and change the value in the database for user `is_verified` to true 
      operationId: post-auth-verify-user
      security: 
        - bearerAuth: []
      tags: 
        - Auth
      responses:
        '200':
          description: User Successfully Verified 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Successfully Send Email verify for Nanda:
                  value:
                    status: true
                    message: Successfully Send Verify Token
                    data:
                      email: nandasuparman@gmail.com
                      token: <JWTToken>
        '400':
          description: Bad Request No Email Registered, Verify User Email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Message Cannot Verify:
                  value:
                    status: false
                    message: Cannot Verify Because User is the email is unavailable  
                    data: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/resend-email-verify-user:
    post:
      summary: Verify User Using Email by Searching The Current User Logged In (whoami)
      operationId: resend-post-auth-verify-user
      security: 
        - bearerAuth: []
      tags: 
        - Auth
      responses:
        '200':
          description: Resend Token for Your Email is already Send, here the we just send the email with a token to verify the user   
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Successfully Send Email verify for Nanda:
                  value:
                    status: true
                    message: Successfully Send Verify Token
                    data:
                      email: nandasuparman@gmail.com
                      token: <JWTToken>
        '400':
          description: Bad Request No Email Registered, Verify User Email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Message Cannot Verify:
                  value:
                    status: false
                    message: Cannot Verify Because User is the email is unavailable  
                    data: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'

